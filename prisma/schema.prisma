// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  phone     String    @unique
  country   String
  createdAt DateTime  @default(now())
  carts     Cart[]
  addresses Address[]
  orders    Order[]
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  country     String
  province    String
  city        String
  postalCode  String
  addressLine String
  isMain      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String[]
  brandId     Int
  brand       Brand       @relation(fields: [brandId], references: [id])
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  logo     String?
  products Product[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  image       String
  exploreInfo String?
  products    Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  createdAt       DateTime    @default(now())
  status          String      @default("pending")
  paymentIntentId String?
  items           OrderItem[]
}

model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int
  order           Order   @relation(fields: [orderId], references: [id])
  productId       Int
  product         Product @relation(fields: [productId], references: [id])
  quantity        Int
  priceAtPurchase Float
}
